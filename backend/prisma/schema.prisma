// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid()) // Automatically generated GUID for identifying user on this site. Even if user is deleted, this GUID is not changed.
  oid       String?    @unique // AAD OID = Unique User ID. Set null if user is deleted.
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  type      UserType   @default(NORMAL)
  status    UserStatus @default(NORMAL)
  handle    String?    @unique // Set null if user is deleted.
  name      String?    @db.VarChar(50)
  email     String?    @db.VarChar(254)

  joinedGroups  UserGroup[]
  comments      Comment[]
  items         Item[]
  stocks        Stock[]
  likes         Like[]
  following     Follow[]       @relation("from")
  followed      Follow[]       @relation("to")
  Watching      Watch[]
  notifications Notification[]

  @@index([type])
  @@index([status])
  @@map("user")
}

model Group {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  type                GroupType           @default(OPEN)
  status              GroupStatus         @default(NORMAL)
  handle              String?             @unique // Set null if group is deleted.
  name                String?             @db.VarChar(50)
  description         String?             @db.Text
  joinCondition       ConditionJoinGroup  @default(REQUIRE_ADMIN_APPROVAL) @map("join_condition")
  writeItemCondition  ConditionWriteItem  @default(NOT_REQUIRED) @map("write_item_condition")
  writeItemPermission PermissionWriteItem @default(GROUP_MEMBER) @map("write_item_permission")
  readItemPermission  PermissionReadItem  @default(GROUP_MEMBER) @map("read_item_permission")

  members UserGroup[]
  items   Item[]
  watched Watch[]

  @@index([type])
  @@index([status])
  @@map("group")
}

model Item {
  id                     String                 @id @default(cuid())
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  user                   User                   @relation(fields: [userId], references: [id])
  userId                 String
  group                  Group?                 @relation(fields: [groupId], references: [id], onDelete: SetNull) // if item is dfaft, group is null.
  groupId                String?
  title                  String?                @db.VarChar(255)
  blobPointer            String?                @map("blob_pointer")
  draftPointer           String?                @map("draft_pointer")
  type                   ItemType               @default(NORMAL)
  status                 ItemStatus             @default(NORMAL)
  writeCommentPermission PermissionWriteComment @default(ALL) @map("write_comment_permission")

  comments Comment[]
  stocked  Stock[]
  liked    Like[]

  @@index([type])
  @@index([status])
  @@map("item")
}

model Comment {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  item        Item          @relation(fields: [itemId], references: [id])
  itemId      String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  blobPointer String?       @map("blob_pointer")
  type        CommentType   @default(NORMAL)
  status      CommentStatus @default(NORMAL)

  @@index([type])
  @@index([status])
  @@map("comment")
}

model UserGroup {
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  role      UserGroupRole @default(MEMBER)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@index([role])
  @@map("user_group")
}

model Stock {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  label     String?  @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, itemId])
  @@map("stock")
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, itemId])
  @@map("like")
}

model Follow {
  user      User     @relation("from", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  target    User     @relation("to", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, targetId])
  @@map("follow")
}

model Watch {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@map("watch")
}

model Notification {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      NotificationType   @default(NORMAL)
  status    NotificationStatus @default(UNREAD)
  title     String?            @db.VarChar(50)
  message   String?            @db.VarChar(255)

  @@index([type])
  @@index([status])
  @@map("notification")
}

enum UserType {
  NORMAL
}

enum UserStatus {
  NORMAL
  DELETED
}

enum GroupType {
  OPEN
  PUBLIC
  PRIVATE
}

enum ConditionJoinGroup {
  NOT_REQUIRED
  REQUIRE_ADMIN_APPROVAL
}

enum PermissionReadItem {
  ADMIN
  GROUP_MEMBER
  ALL
}

enum ConditionWriteItem {
  NOT_REQUIRED
  REQUIRE_ADMIN_APPROVAL
}

enum PermissionWriteItem {
  ADMIN
  GROUP_MEMBER
  ALL
}

enum PermissionWriteComment {
  OWNER
  GROUP_MEMBER
  ALL
}

enum GroupStatus {
  NORMAL
  DELETED
}

enum ItemType {
  NORMAL
  SHARED
}

enum ItemStatus {
  NORMAL
  DELETED
  PENDING_APPROVAL
}

enum CommentType {
  NORMAL
}

enum CommentStatus {
  NORMAL
  DELETED
}

enum UserGroupRole {
  ADMIN
  MEMBER
}

enum NotificationType {
  NORMAL
}

enum NotificationStatus {
  UNREAD
  READ
  DELETED
}
