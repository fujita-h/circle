// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid()) // Automatically generated CUID for identifying user on this site. Even if user is deleted, this CUID is not changed.
  oid       String?    @unique // AAD OID = Unique User ID. Set null if user is deleted.
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  type      UserType   @default(NORMAL)
  status    UserStatus @default(NORMAL)
  handle    String?    @unique // Set null if user is deleted.
  name      String?    @db.VarChar(50)
  email     String?    @db.VarChar(254)

  Joined        Membership[]
  Comments      Comment[]
  Notes         Note[]
  Stocks        Stock[]
  StockLabels   StockLabel[]
  Likes         Like[]
  Following     Follow[]       @relation("from")
  Followed      Follow[]       @relation("to")
  Watching      Watch[]
  Notifications Notification[]

  @@index([type])
  @@index([status])
  @@map("user")
}

model Group {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  status              GroupStatus         @default(NORMAL)
  handle              String?             @unique // Set null if the group is deleted.
  name                String?             @db.VarChar(50)
  description         String?             @db.Text
  readNotePermission  PermissionReadNote  @default(ADMIN) @map("read_note_permission")
  writeNotePermission PermissionWriteNote @default(ADMIN) @map("write_note_permission")
  writeNoteCondition  ConditionWriteNote  @default(ALLOWED) @map("write_note_condition")
  joinGroupCondition  ConditionJoinGroup  @default(DENIED) @map("join_group_condition")

  Members Membership[]
  Notes   Note[]
  Watched Watch[]

  @@index([status])
  @@map("group")
}

model Membership {
  User      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @map("user_id")
  Group     Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String         @map("group_id")
  role      MembershipRole @default(MEMBER)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@index([role])
  @@map("membership")
}

model Note {
  id                     String                 @id @default(cuid())
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  User                   User                   @relation(fields: [userId], references: [id])
  userId                 String                 @map("user_id")
  Group                  Group?                 @relation(fields: [groupId], references: [id], onDelete: SetNull) // group is null if the note is drafted.
  groupId                String?                @map("group_id")
  title                  String?                @db.VarChar(250)
  blobPointer            String?                @map("blob_pointer")
  draftBlobPointer       String?                @map("draft_blob_pointer")
  type                   NoteType               @default(NORMAL)
  status                 NoteStatus             @default(NORMAL)
  writeCommentPermission PermissionWriteComment @default(ALL) @map("write_comment_permission")

  Tags     TagMap[]
  Comments Comment[]
  Stocked  Stock[]
  Liked    Like[]

  @@index([type])
  @@index([status])
  @@map("note")
}

model Tag {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @unique
  displayName String?  @map("display_name") @db.VarChar(50)
  haveIcon    Boolean  @default(false) @map("have_icon")

  Notes TagMap[]

  @@map("tag")
}

model TagMap {
  Note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String   @map("note_id")
  Tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([noteId, tagId])
  @@map("tag_map")
}

model Comment {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  Note        Note          @relation(fields: [noteId], references: [id])
  noteId      String        @map("note_id")
  User        User          @relation(fields: [userId], references: [id])
  userId      String        @map("user_id")
  blobPointer String?       @map("blob_pointer")
  type        CommentType   @default(NORMAL)
  status      CommentStatus @default(NORMAL)

  @@index([type])
  @@index([status])
  @@map("comment")
}

model Stock {
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @map("user_id")
  Note      Note        @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String      @map("note_id")
  Label     StockLabel? @relation(fields: [labelId], references: [id])
  labelId   String?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@id([userId, noteId])
  @@map("stock")
}

model StockLabel {
  id        String   @id @default(cuid())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Stocks Stock[]

  @@unique([userId, name])
  @@map("stock_label")
}

model Like {
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  Note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String   @map("note_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, noteId])
  @@map("like")
}

model Follow {
  From      User     @relation("from", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String   @map("from_id")
  To        User     @relation("to", fields: [toId], references: [id], onDelete: Cascade)
  toId      String   @map("to_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([fromId, toId])
  @@map("follow")
}

model Watch {
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  Group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String   @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@map("watch")
}

model Notification {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  User      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String             @map("user_id")
  type      NotificationType   @default(NORMAL)
  status    NotificationStatus @default(UNREAD)
  title     String?            @db.VarChar(50)
  message   String?            @db.Text

  @@index([type])
  @@index([status])
  @@map("notification")
}

enum UserType {
  NORMAL
}

enum UserStatus {
  NORMAL
  DELETED
}

enum PermissionReadNote {
  ADMIN
  MEMBER
  ALL
}

enum PermissionWriteNote {
  ADMIN
  MEMBER
  ALL
}

enum ConditionWriteNote {
  REQUIRE_ADMIN_APPROVAL
  ALLOWED
}

enum ConditionJoinGroup {
  DENIED
  REQUIRE_ADMIN_APPROVAL
  ALLOWED
}

enum PermissionWriteComment {
  OWNER
  MEMBER
  ALL
}

enum GroupStatus {
  NORMAL
  DELETED
}

enum NoteType {
  NORMAL
  SHARED
}

enum NoteStatus {
  NORMAL
  DELETED
  PENDING_APPROVAL
  REJECTED_BY_ADMIN
  EXCLUDED_BY_ADMIN
}

enum CommentType {
  NORMAL
}

enum CommentStatus {
  NORMAL
  DELETED
}

enum MembershipRole {
  ADMIN
  MEMBER
  PENDING_APPROVAL
}

enum NotificationType {
  NORMAL
}

enum NotificationStatus {
  UNREAD
  READ
  DELETED
}
