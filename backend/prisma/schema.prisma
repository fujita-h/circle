// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  oid       String   @unique // AAD OID = Unique User ID. 
  handle    String   @unique
  name      String
  email     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  JoinedGroups    Membership[]
  Comments        Comment[]
  Notes           Note[]
  Stocks          Stock[]
  StockLabels     StockLabel[]
  Likes           Like[]
  FollowingUsers  FollowUser[]   @relation("from_user")
  FollowedUsers   FollowUser[]   @relation("to_user")
  FollowingGroups FollowGroup[]
  FollowingTopics FollowTopic[]
  Notifications   Notification[]
  UserSetting     UserSetting?

  @@map("user")
}

model UserSetting {
  id             String         @id @default(cuid())
  userId         String         @unique @map("user_id")
  User           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  styleNotesView StyleNotesView @default(LIST) @map("style_notes_view")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  @@index([userId])
  @@map("user_setting")
}

enum StyleNotesView {
  LIST
  GRID
}

model FollowUser {
  fromUserId String   @map("from_user_id")
  toUserId   String   @map("to_user_id")
  FromUser   User     @relation("from_user", fields: [fromUserId], references: [id], onDelete: Cascade)
  ToUser     User     @relation("to_user", fields: [toUserId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([fromUserId, toUserId])
  @@map("follow_user")
}

model FollowGroup {
  userId    String   @map("user_id")
  groupId   String   @map("group_id")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@map("follow_group")
}

model FollowTopic {
  userId    String   @map("user_id")
  topicId   String   @map("topic_id")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, topicId])
  @@map("follow_topic")
}

model Group {
  id          String    @id @default(cuid())
  handle      String    @unique
  name        String
  description String?
  type        GroupType @default(PRIVATE)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  Members        Membership[]
  Notes          Note[]
  FollowedGroups FollowGroup[]

  @@map("group")
}

enum GroupType {
  PRIVATE
  ADVERTISING
}

model Membership {
  userId    String         @map("user_id")
  groupId   String         @map("group_id")
  User      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group     Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role      MembershipRole @default(MEMBER)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@index([role])
  @@map("membership")
}

enum MembershipRole {
  MEMBER
  ADMIN
}

model Note {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  groupId       String?   @map("group_id")
  title         String?
  bodyBlobName  String?   @map("body_blob_name")
  draftBlobName String?   @map("draft_blob_name")
  isPublished   Boolean   @default(false) @map("is_published")
  canComment    Boolean   @default(true) @map("can_comment")
  publishedAt   DateTime? @map("published_at")
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group         Group?    @relation(fields: [groupId], references: [id], onDelete: SetNull) // group is null if the note is drafted.
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  Topics   TopicMap[]
  Comments Comment[]
  Stocked  Stock[]
  Liked    Like[]

  @@map("note")
}

model Comment {
  id           String      @id @default(cuid())
  userId       String      @map("user_id")
  noteId       String      @map("note_id")
  commentType  CommentType @default(NORMAL) @map("comment_type")
  bodyBlobName String?     @map("body_blob_name")
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Note         Note        @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("comment")
}

enum CommentType {
  NORMAL
}

model Topic {
  id        String   @id @default(cuid())
  handle    String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Notes          TopicMap[]
  FollowedTopics FollowTopic[]

  @@map("topic")
}

model TopicMap {
  noteId    String   @map("note_id")
  topicId   String   @map("topic_id")
  order     Int      @default(0)
  Note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  Topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([noteId, topicId])
  @@index([noteId, order])
  @@map("topic_map")
}

model Stock {
  userId    String     @map("user_id")
  noteId    String     @map("note_id")
  labelId   String
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Note      Note       @relation(fields: [noteId], references: [id], onDelete: Cascade)
  Label     StockLabel @relation(fields: [labelId], references: [id])
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@id([userId, noteId, labelId])
  @@map("stock")
}

model StockLabel {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  default   Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Stocks Stock[]

  @@index([id, userId, default])
  @@index([userId, id, default])
  @@map("stock_label")
}

model Like {
  userId    String   @map("user_id")
  noteId    String   @map("note_id")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, noteId])
  @@map("like")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType @default(NORMAL)
  body      String           @db.Text
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  @@index([type])
  @@map("notification")
}

enum NotificationType {
  NORMAL
}
